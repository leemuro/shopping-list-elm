var _user$project$CategorizedList$completedStyle = function (item) {
	return item.completed ? _elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 'text-decoration', _1: 'line-through'}
		]) : _elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 'text-decoration', _1: 'none'}
		]);
};
var _user$project$CategorizedList$listItemStyle = _elm_lang$core$Native_List.fromArray(
	[
		{ctor: '_Tuple2', _0: 'padding', _1: '1em'},
		{ctor: '_Tuple2', _0: 'border-top', _1: '1px solid #ccc'}
	]);
var _user$project$CategorizedList$listStyle = _elm_lang$core$Native_List.fromArray(
	[
		{ctor: '_Tuple2', _0: 'margin', _1: '0'},
		{ctor: '_Tuple2', _0: 'padding', _1: '0'},
		{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'},
		{ctor: '_Tuple2', _0: 'border-bottom', _1: '1px solid #ccc'}
	]);
var _user$project$CategorizedList$headerStyle = _elm_lang$core$Native_List.fromArray(
	[
		{ctor: '_Tuple2', _0: 'font-size', _1: '1.3em'},
		{ctor: '_Tuple2', _0: 'margin', _1: '0.5em'}
	]);
var _user$project$CategorizedList$itemMatches = F2(
	function (item, matchers) {
		return A2(
			_elm_lang$core$List$any,
			function (matcher) {
				return A2(_elm_lang$core$String$contains, matcher, item.desc);
			},
			matchers);
	});
var _user$project$CategorizedList$itemsInNoCategory = F2(
	function (items, categories) {
		var allMatchers = A2(
			_elm_lang$core$List$concatMap,
			function (c) {
				return c.matchers;
			},
			categories);
		return A2(
			_elm_lang$core$List$filter,
			function (item) {
				return _elm_lang$core$Basics$not(
					A2(_user$project$CategorizedList$itemMatches, item, allMatchers));
			},
			items);
	});
var _user$project$CategorizedList$itemsInCategory = F3(
	function (items, category, categories) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(category.matchers),
			0) > 0) ? A2(
			_elm_lang$core$List$filter,
			function (item) {
				return A2(_user$project$CategorizedList$itemMatches, item, category.matchers);
			},
			items) : A2(_user$project$CategorizedList$itemsInNoCategory, items, categories);
	});
var _user$project$CategorizedList$listItem = function (item) {
	return A2(
		_elm_lang$html$Html$li,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(_user$project$CategorizedList$listItemStyle),
				_elm_lang$html$Html_Attributes$style(
				_user$project$CategorizedList$completedStyle(item)),
				_elm_lang$html$Html_Events$onClick(
				_user$project$AppMessages$ToggleItem(item.id))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(item.desc)
			]));
};
var _user$project$CategorizedList$listCategory = F2(
	function (categoryName, items) {
		return A2(
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$h1,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$style(_user$project$CategorizedList$headerStyle)
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(categoryName)
						])),
					A2(
					_elm_lang$html$Html$ul,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$style(_user$project$CategorizedList$listStyle)
						]),
					A2(_elm_lang$core$List$map, _user$project$CategorizedList$listItem, items))
				]));
	});
var _user$project$CategorizedList$listCategories = F2(
	function (categories, items) {
		return A2(
			_elm_lang$core$List$map,
			function (c) {
				return A2(
					_user$project$CategorizedList$listCategory,
					c.name,
					A3(_user$project$CategorizedList$itemsInCategory, items, c, categories));
			},
			categories);
	});
var _user$project$CategorizedList$categorizedList = F2(
	function (categories, addedItems) {
		return A2(
			_elm_lang$html$Html$ul,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$style(_user$project$CategorizedList$listStyle)
				]),
			A2(_user$project$CategorizedList$listCategories, categories, addedItems));
	});
