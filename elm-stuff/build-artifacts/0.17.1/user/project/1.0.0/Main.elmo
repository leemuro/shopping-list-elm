var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(_user$project$AppStyles$baseBox)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A3(
				_elm_lang$html$Html$node,
				'meta',
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$name('viewport'),
						_elm_lang$html$Html_Attributes$content('width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no')
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				_user$project$HeaderBar$headerBar,
				A2(_user$project$AddPanel$addPanel, model.newItems, model.addPanelVisible),
				A2(_user$project$CategorizedList$categorizedList, model.categories, model.addedItems)
			]));
};
var _user$project$Main$toggleItemIfId = F2(
	function (item, id) {
		return _elm_lang$core$Native_Utils.eq(item.id, id) ? _elm_lang$core$Native_Utils.update(
			item,
			{
				completed: _elm_lang$core$Basics$not(item.completed)
			}) : item;
	});
var _user$project$Main$newItem = F2(
	function (id, desc) {
		return {id: id, desc: desc, completed: false};
	});
var _user$project$Main$textToNewItems = F2(
	function (text, currentItemId) {
		var lines = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			A2(_elm_lang$core$String$split, '\n', text));
		return A2(
			_elm_lang$core$List$map,
			function (line) {
				return A2(
					_user$project$Main$newItem,
					currentItemId + _elm_lang$core$Basics$fst(line),
					_elm_lang$core$Basics$snd(line));
			},
			lines);
	});
var _user$project$Main$appendTextAsNewItems = F3(
	function (items, text, currentItemId) {
		return A2(
			_elm_lang$core$List$append,
			items,
			A2(_user$project$Main$textToNewItems, text, currentItemId));
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'ToggleAddPanel':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						addPanelVisible: _elm_lang$core$Basics$not(model.addPanelVisible)
					});
			case 'NewItems':
				return _elm_lang$core$Native_Utils.update(
					model,
					{newItems: _p0._0});
			case 'AddItems':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						addedItems: A3(_user$project$Main$appendTextAsNewItems, model.addedItems, model.newItems, model.currentItemId),
						currentItemId: model.currentItemId + _elm_lang$core$List$length(
							A2(_elm_lang$core$String$split, '\n', model.newItems)),
						newItems: '',
						addPanelVisible: false
					});
			case 'ToggleItem':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						addedItems: A2(
							_elm_lang$core$List$map,
							function (i) {
								return A2(_user$project$Main$toggleItemIfId, i, _p0._0);
							},
							model.addedItems)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						addedItems: _elm_lang$core$Native_List.fromArray(
							[])
					});
		}
	});
var _user$project$Main$model = {
	newItems: '',
	addedItems: _elm_lang$core$Native_List.fromArray(
		[
			{id: 0, desc: 'potato chips', completed: false},
			{id: 1, desc: 'grapes', completed: false}
		]),
	categories: _elm_lang$core$Native_List.fromArray(
		[
			{
			name: 'Produce',
			matchers: _elm_lang$core$Native_List.fromArray(
				['banana', 'apple', 'grape', 'potato'])
		},
			{
			name: 'Meat',
			matchers: _elm_lang$core$Native_List.fromArray(
				['chicken', 'beef', 'pork', 'turkey', 'meat'])
		},
			{
			name: 'Snacks',
			matchers: _elm_lang$core$Native_List.fromArray(
				['chips', 'chocolate', 'crackers'])
		},
			{
			name: 'Other',
			matchers: _elm_lang$core$Native_List.fromArray(
				[])
		}
		]),
	currentItemId: 2,
	addPanelVisible: false
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$beginnerProgram(
		{model: _user$project$Main$model, view: _user$project$Main$view, update: _user$project$Main$update})
};
var _user$project$Main$ShoppingItem = F3(
	function (a, b, c) {
		return {id: a, desc: b, completed: c};
	});
var _user$project$Main$Categories = F2(
	function (a, b) {
		return {name: a, matchers: b};
	});
var _user$project$Main$ShoppingList = F5(
	function (a, b, c, d, e) {
		return {newItems: a, addedItems: b, categories: c, currentItemId: d, addPanelVisible: e};
	});
