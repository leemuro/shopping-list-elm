var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$HeaderBar$headerBar,
				A2(_user$project$AddPanel$addPanel, model.newItems, model.addPanelVisible),
				A2(_user$project$CategorizedList$categorizedList, model.categories, model.addedItems)
			]));
};
var _user$project$Main$toggleItemIfId = F2(
	function (item, id) {
		return _elm_lang$core$Native_Utils.eq(item.id, id) ? _elm_lang$core$Native_Utils.update(
			item,
			{
				completed: _elm_lang$core$Basics$not(item.completed)
			}) : item;
	});
var _user$project$Main$newItem = F2(
	function (id, desc) {
		return {id: id, desc: desc, completed: false};
	});
var _user$project$Main$textToNewItems = F2(
	function (text, currentItemId) {
		var lines = A2(
			_elm_lang$core$List$indexedMap,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			A2(_elm_lang$core$String$split, '\n', text));
		return A2(
			_elm_lang$core$List$filter,
			function (item) {
				return _elm_lang$core$Basics$not(
					_elm_lang$core$Native_Utils.eq(item.desc, ''));
			},
			A2(
				_elm_lang$core$List$map,
				function (line) {
					return A2(
						_user$project$Main$newItem,
						currentItemId + _elm_lang$core$Basics$fst(line),
						_elm_lang$core$String$trim(
							_elm_lang$core$Basics$snd(line)));
				},
				lines));
	});
var _user$project$Main$appendTextAsNewItems = F3(
	function (items, text, currentItemId) {
		return A2(
			_elm_lang$core$List$append,
			items,
			A2(_user$project$Main$textToNewItems, text, currentItemId));
	});
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$Main$defaultModel = {
	newItems: '',
	addedItems: _elm_lang$core$Native_List.fromArray(
		[]),
	categories: _user$project$Categories$defaultCategories,
	currentItemId: 0,
	addPanelVisible: false
};
var _user$project$Main$init = function (model) {
	var _p0 = model;
	if (_p0.ctor === 'Just') {
		return {ctor: '_Tuple2', _0: _p0._0, _1: _elm_lang$core$Platform_Cmd$none};
	} else {
		return {ctor: '_Tuple2', _0: _user$project$Main$defaultModel, _1: _elm_lang$core$Platform_Cmd$none};
	}
};
var _user$project$Main$setStorage = _elm_lang$core$Native_Platform.outgoingPort(
	'setStorage',
	function (v) {
		return {
			newItems: v.newItems,
			addedItems: _elm_lang$core$Native_List.toArray(v.addedItems).map(
				function (v) {
					return {id: v.id, desc: v.desc, completed: v.completed};
				}),
			categories: _elm_lang$core$Native_List.toArray(v.categories).map(
				function (v) {
					return {
						name: v.name,
						matchers: _elm_lang$core$Native_List.toArray(v.matchers).map(
							function (v) {
								return v;
							}),
						exclusions: _elm_lang$core$Native_List.toArray(v.exclusions).map(
							function (v) {
								return v;
							})
					};
				}),
			currentItemId: v.currentItemId,
			addPanelVisible: v.addPanelVisible
		};
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'ToggleAddPanel':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						addPanelVisible: _elm_lang$core$Basics$not(model.addPanelVisible)
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$setStorage(newModel)
				};
			case 'NewItems':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{newItems: _p1._0});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$setStorage(newModel)
				};
			case 'AddItems':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						addedItems: A3(_user$project$Main$appendTextAsNewItems, model.addedItems, model.newItems, model.currentItemId),
						currentItemId: model.currentItemId + _elm_lang$core$List$length(
							A2(_elm_lang$core$String$split, '\n', model.newItems)),
						newItems: '',
						addPanelVisible: false
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$setStorage(newModel)
				};
			case 'ToggleItem':
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						addedItems: A2(
							_elm_lang$core$List$map,
							function (i) {
								return A2(_user$project$Main$toggleItemIfId, i, _p1._0);
							},
							model.addedItems)
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$setStorage(newModel)
				};
			default:
				var newModel = _elm_lang$core$Native_Utils.update(
					model,
					{
						addedItems: _elm_lang$core$Native_List.fromArray(
							[])
					});
				return {
					ctor: '_Tuple2',
					_0: newModel,
					_1: _user$project$Main$setStorage(newModel)
				};
		}
	});
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$programWithFlags(
		{init: _user$project$Main$init, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions, view: _user$project$Main$view}),
	flags: _elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Maybe$Just,
				A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(_elm_lang$core$Json_Decode_ops[':='], 'addPanelVisible', _elm_lang$core$Json_Decode$bool),
					function (addPanelVisible) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							A2(
								_elm_lang$core$Json_Decode_ops[':='],
								'addedItems',
								_elm_lang$core$Json_Decode$list(
									A2(
										_elm_lang$core$Json_Decode$andThen,
										A2(_elm_lang$core$Json_Decode_ops[':='], 'completed', _elm_lang$core$Json_Decode$bool),
										function (completed) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(_elm_lang$core$Json_Decode_ops[':='], 'desc', _elm_lang$core$Json_Decode$string),
												function (desc) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(_elm_lang$core$Json_Decode_ops[':='], 'id', _elm_lang$core$Json_Decode$int),
														function (id) {
															return _elm_lang$core$Json_Decode$succeed(
																{completed: completed, desc: desc, id: id});
														});
												});
										}))),
							function (addedItems) {
								return A2(
									_elm_lang$core$Json_Decode$andThen,
									A2(
										_elm_lang$core$Json_Decode_ops[':='],
										'categories',
										_elm_lang$core$Json_Decode$list(
											A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(
													_elm_lang$core$Json_Decode_ops[':='],
													'exclusions',
													_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
												function (exclusions) {
													return A2(
														_elm_lang$core$Json_Decode$andThen,
														A2(
															_elm_lang$core$Json_Decode_ops[':='],
															'matchers',
															_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
														function (matchers) {
															return A2(
																_elm_lang$core$Json_Decode$andThen,
																A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
																function (name) {
																	return _elm_lang$core$Json_Decode$succeed(
																		{exclusions: exclusions, matchers: matchers, name: name});
																});
														});
												}))),
									function (categories) {
										return A2(
											_elm_lang$core$Json_Decode$andThen,
											A2(_elm_lang$core$Json_Decode_ops[':='], 'currentItemId', _elm_lang$core$Json_Decode$int),
											function (currentItemId) {
												return A2(
													_elm_lang$core$Json_Decode$andThen,
													A2(_elm_lang$core$Json_Decode_ops[':='], 'newItems', _elm_lang$core$Json_Decode$string),
													function (newItems) {
														return _elm_lang$core$Json_Decode$succeed(
															{addPanelVisible: addPanelVisible, addedItems: addedItems, categories: categories, currentItemId: currentItemId, newItems: newItems});
													});
											});
									});
							});
					}))
			]))
};
var _user$project$Main$ShoppingItem = F3(
	function (a, b, c) {
		return {id: a, desc: b, completed: c};
	});
var _user$project$Main$Categories = F3(
	function (a, b, c) {
		return {name: a, matchers: b, exclusions: c};
	});
var _user$project$Main$ShoppingList = F5(
	function (a, b, c, d, e) {
		return {newItems: a, addedItems: b, categories: c, currentItemId: d, addPanelVisible: e};
	});
